export interface FilePosition {
    offset: number;
    line: number;
    column: number;
}
export interface FileRange {
    start: FilePosition;
    end: FilePosition;
    source: string;
}
export interface LiteralExpectation {
    type: "literal";
    text: string;
    ignoreCase: boolean;
}
export interface ClassParts extends Array<string | ClassParts> {
}
export interface ClassExpectation {
    type: "class";
    parts: ClassParts;
    inverted: boolean;
    ignoreCase: boolean;
}
export interface AnyExpectation {
    type: "any";
}
export interface EndExpectation {
    type: "end";
}
export interface OtherExpectation {
    type: "other";
    description: string;
}
export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;
declare class _PeggySyntaxError extends Error {
    static buildMessage(expected: Expectation[], found: string | null): string;
    message: string;
    expected: Expectation[];
    found: string | null;
    location: FileRange;
    name: string;
    constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
    format(sources: {
        source?: any;
        text: string;
    }[]): string;
}
export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
}
export interface ParseOptions {
    filename?: string;
    startRule?: "Word";
    tracer?: any;
    [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(input: string, options?: Options) => Options extends {
    startRule: infer StartRule;
} ? StartRule extends "Word" ? Word : Word : Word;
export declare const parse: ParseFunction;
export declare const PeggySyntaxError: typeof _PeggySyntaxError;
export type PeggySyntaxError = _PeggySyntaxError;
export type Word = Syllable[];
export type Syllable = {
    stress: 1 | 2 | undefined;
    parts: [any, SyllableEnding];
} | {
    stress: 1 | 2 | undefined;
    parts: [any, null];
} | {
    stress: 1 | 2 | undefined;
    parts: [null, string];
};
export type SyllableEnding = string;
export type Consonant = "b" | "t\u0283" | "t\u0279" | "t" | string | "k" | "z" | "\u0279" | "s" | "m" | "f" | "\u0261" | "n" | "\u026b" | "w" | "p" | "\u03b8" | "v" | "h" | "\u014b" | "\u0283" | "\u0292" | "d\u0292" | "d" | "\u00f0";
export type EndingConsonant = "b" | string | "m" | "\u0261" | "\u025b" | "n" | "e" | "p" | "h" | "\u014b";
export type DiphthongEnding = string | "j\u0259\u014b" | "e\u026an";
export type Diphthong = "o\u028a" | "e\u026a" | "a\u026a" | "a\u028a" | "ju" | "j\u0259" | "j\u00e6" | "j\u0251" | "j\u028a" | "j\u025b" | "j\u026a" | "j\u0254" | "ji" | "jo\u028a" | "ja\u028a" | "je\u026a" | "\u0259j" | "\u0254\u026a";
export type Vowel = "a" | "\u028a" | "\u0259" | "\u0254" | "u" | "\u026a" | "o" | "\u025b" | "e" | "i" | "\u0251" | "\u025d" | "\u00e6" | "j";
export {};
